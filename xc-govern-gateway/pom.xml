<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>xc-framework-parent</artifactId>
        <groupId>com.xuecheng</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../xc-framework-parent/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>xc-govern-gateway</artifactId>

    <dependencies>
        <!--zuul网关
                服务网关是在微服务前边设置一道屏障，请求先到服务网关，网关会对请求进行过虑、校验、路由等处理。有了服
            务网关可以提高微服务的安全性，网关校验请求的合法性，请求不合法将被拦截，拒绝访问
                Zuul与Nginx在实际项目中需要配合使用，如下图，Nginx的作用是反向代理、负载均衡，Zuul的作用是保障微服
            务的安全访问，拦截微服务请求，校验合法性及负载均衡。
        -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
        </dependency>
        <!--eireka客户端-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <dependency>
            <groupId>com.xuecheng</groupId>
            <artifactId>xc-framework-model</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.xuecheng</groupId>
            <artifactId>xc-framework-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--redis依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!--HTTP是现代应用常用的一种交换数据和媒体的网络方式，高效地使用HTTP能让资源加载更快，
            节省带宽。OkHttp是一个高效的HTTP客户端.
            1.1. 异步GET请求
            1.2. 同步GET请求
            2.1. POST方式提交String
            2.2 POST方式提交流
            2.3. POST提交文件
            2.4. POST方式提交表单
            2.5. POST方式提交分块请求
            III.拦截器-interceptor
            IV. 自定义dns服务
            V.其他
         -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.feign</groupId>
            <artifactId>feign-okhttp</artifactId>
        </dependency>
        <!-- Fastjson是一个Java语言编写的高性能功能完善的JSON库 被广泛使用在缓存序列化、协议交互、Web输出、Android客户端等多种应用场景
             常用api:
                1. 将对象序列化成json字符串  toJSONString(Object object)
                2. 将json字符串反序列化成对象  parseObject(String text, Class<T> clazz)
                3. 将json字符串反序列化成JSON对象 parseObject(String text)
                4.根据key 得到json中的json数组 getJSONArray(String key)
                5. 根据下标拿到json数组的json对象 getJSONObject(int index)
                6.  根据key拿到json的字符串值 getString(String key)
                7. 根据key拿到json的int值 getIntValue(String key)
                8. 根据key拿到json的boolean值 getBooleanValue(String key)
        -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>
        <!--commons-io是一款初六io流的工具,封装了很多处理io流和文件的方法,可以大大简化我们处理io流和操作文件的代码.
            commons-io主要分为:
                工具类: 工具类包括FileUtils,IOUtils,FilenameUtils和FileSystemUtils,前三者的方法并没有太大的区别,只是操作的对象不同.顾名思义,
                        FileUtils主要操作File类，
                        IOUtils主要操作IO流，
                        FilenameUtils则是操作文件名，
                        FileSystemUtils包含了一些JDK没有提供的用于访问文件系统的实用方法.当前,只有一个用于读取硬盘剩余空间的方法可用.
                尾端类: 这个类库上有两个相关类：
                        EndianUtils包含用于交换java原对象和流之间的字节序列。
                        SwappedDataInputStream类是DataInput接口的一个实例。使用它，可以读取非本地的字节序列
                迭代器: LineIterator类提供了一个灵活的方式与基于行的文件交互。可以直接创建一个实例，或者使用FileUtils或IOUtils的工厂方法来创建
                文件过滤器等: org.apache.commons.io.filefilter包定义了一个合并了java.io.FileFilter以及java.io.FilenameFilter的接口(IOFileFilter)。除此之外，这个包还提供了一系列直接可用的IOFileFilter的实现类，
                            可以通过他们合并其它的文件过滤器。比如，这些文件过滤器可以在列出文件时使用或者在使用文件对话框时使用
         -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <!-- commons-lang3中可以让我们写的代码更加的优雅、提供开发效率，最重要的是我们自己写的工具类有可能出现奇怪的问题
            1 ArchUtils：系统信息工具类
            2 BooleanUtils：布尔工具类
            3 EnumUtils：枚举工具类
            4 StringUtils：字符串工具类
            5 NumberUtils：数字操作工具
            6 RandomStringUtils：随机字符串工具类
            7 ...
        -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <!-- springboot 单元测试 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>